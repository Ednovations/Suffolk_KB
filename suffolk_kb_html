 <!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Suffolk Primary Health - Call Flow Reference</title>

    <style>

        :root {

            --primary-color: #2c3e50;

            --secondary-color: #3498db;

            --accent-color: #e74c3c;

            --light-color: #ecf0f1;

            --dark-color: #2c3e50;

            --success-color: #27ae60;

            --warning-color: #f39c12;

        }

       

        body {

            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

            margin: 0;

            padding: 0;

            display: grid;

            grid-template-columns: 250px 1fr;

            min-height: 100vh;

            background-color: #f5f7fa;

        }

       

        /* Sidebar Styles */

        #sidebar {

            background-color: var(--primary-color);

            color: white;

            padding: 20px 0;

            height: 100vh;

            position: sticky;

            top: 0;

            overflow-y: auto;

            box-shadow: 2px 0 10px rgba(0,0,0,0.1);

        }

       

        #sidebar h2 {

            padding: 0 20px;

            margin-bottom: 30px;

            font-size: 1.3rem;

            border-bottom: 1px solid rgba(255,255,255,0.1);

            padding-bottom: 10px;

        }

       

        .sidebar-menu {

            list-style: none;

            padding: 0;

            margin: 0;

        }

       

        .sidebar-menu li {

            margin-bottom: 5px;

        }

       

        .sidebar-menu a {

            display: block;

            padding: 10px 20px;

            color: var(--light-color);

            text-decoration: none;

            transition: all 0.3s;

            border-left: 3px solid transparent;

        }

       

        .sidebar-menu a:hover, .sidebar-menu a.active {

            background-color: rgba(255,255,255,0.1);

            border-left: 3px solid var(--secondary-color);

        }

       

        .sidebar-submenu {

            list-style: none;

            padding-left: 20px;

            display: none;

        }

       

        .sidebar-submenu.show {

            display: block;

        }

       

        .sidebar-submenu a {

            padding: 8px 20px 8px 15px;

            font-size: 0.9rem;

            opacity: 0.9;

        }

       

        .menu-toggle {

            display: flex;

            justify-content: space-between;

            align-items: center;

            cursor: pointer;

        }

       

        .menu-toggle::after {

            content: "▾";

            transition: transform 0.3s;

        }

       

        .menu-toggle.active::after {

            transform: rotate(180deg);

        }

       

        /* Main Content Styles */

        #main-content {

            padding: 30px;

            max-width: 1200px;

            margin: 0 auto;

            width: 100%;

            box-sizing: border-box;

        }

       

        .section {

            background-color: white;

            border-radius: 8px;

            box-shadow: 0 2px 10px rgba(0,0,0,0.05);

            padding: 25px;

            margin-bottom: 30px;

        }

       

        h1, h2, h3, h4 {

            color: var(--dark-color);

        }

       

        h1 {

            margin-top: 0;

            color: var(--primary-color);

            border-bottom: 2px solid var(--secondary-color);

            padding-bottom: 10px;

        }

       

        h2 {

            color: var(--secondary-color);

            margin-top: 0;

        }

       

        h3 {

            margin-top: 25px;

        }

       

        .step {

            background-color: var(--light-color);

            padding: 15px;

            border-left: 4px solid var(--secondary-color);

            margin-bottom: 15px;

            border-radius: 0 4px 4px 0;

        }

       

        .step-number {

            font-weight: bold;

            color: var(--secondary-color);

            margin-right: 5px;

        }

       

        .note {

            background-color: #fff8e1;

            padding: 15px;

            border-left: 4px solid var(--warning-color);

            margin: 15px 0;

            border-radius: 0 4px 4px 0;

        }

       

        .warning {

            background-color: #ffebee;

            padding: 15px;

            border-left: 4px solid var(--accent-color);

            margin: 15px 0;

            border-radius: 0 4px 4px 0;

        }

       

        .success {

            background-color: #e8f5e9;

            padding: 15px;

            border-left: 4px solid var(--success-color);

            margin: 15px 0;

            border-radius: 0 4px 4px 0;

        }

       

        table {

            width: 100%;

            border-collapse: collapse;

            margin: 20px 0;

        }

       

        th, td {

            padding: 12px 15px;

            text-align: left;

            border-bottom: 1px solid #ddd;

        }

       

        th {

            background-color: var(--primary-color);

            color: white;

        }

       

        tr:nth-child(even) {

            background-color: #f9f9f9;

        }

       

        tr:hover {

            background-color: #f1f1f1;

        }

       

        .status-badge {

            display: inline-block;

            padding: 3px 8px;

            border-radius: 4px;

            font-size: 0.8rem;

            font-weight: bold;

            text-transform: uppercase;

        }

       

        .status-pending {

            background-color: #fff3e0;

            color: #e65100;

        }

       

        .status-confirmed {

            background-color: #e8f5e9;

            color: #2e7d32;

        }

       

        .status-cancelled {

            background-color: #ffebee;

            color: #c62828;

        }

       

        .status-rescheduled {

            background-color: #e3f2fd;

            color: #1565c0;

        }

       

        /* Updates Section */

        .updates-container {

            max-height: 300px;

            overflow-y: auto;

            border: 1px solid #ddd;

            border-radius: 4px;

        }

       

        .update-item {

            padding: 15px;

            border-bottom: 1px solid #eee;

        }

       

        .update-item:last-child {

            border-bottom: none;

        }

       

        .update-date {

            font-weight: bold;

            color: var(--secondary-color);

            margin-bottom: 5px;

        }

       

        .update-content {

            margin-left: 20px;

        }

       

        /* Search Box */

        #search-box {

            width: 100%;

            padding: 12px 15px;

            border: 1px solid #ddd;

            border-radius: 4px;

            font-size: 1rem;

            margin-bottom: 20px;

            box-sizing: border-box;

        }

       

        /* Responsive Design */

        @media (max-width: 768px) {

            body {

                grid-template-columns: 1fr;

            }

           

            #sidebar {

                height: auto;

                position: relative;

            }

           

            #main-content {

                padding: 20px;

            }

        }

       

        /* Tabs */

        .tabs {

            display: flex;

            border-bottom: 1px solid #ddd;

            margin-bottom: 20px;

        }

       

        .tab {

            padding: 10px 20px;

            cursor: pointer;

            border: 1px solid transparent;

            border-bottom: none;

            margin-right: 5px;

            background-color: #f1f1f1;

            border-radius: 4px 4px 0 0;

        }

       

        .tab.active {

            background-color: white;

            border-color: #ddd;

            border-bottom: 1px solid white;

            margin-bottom: -1px;

            font-weight: bold;

            color: var(--secondary-color);

        }

       

        .tab-content {

            display: none;

        }

       

        .tab-content.active {

            display: block;

        }

 

        /* Core Values Styles */

        .core-values-container {

            display: flex;

            flex-wrap: wrap;

            gap: 20px;

        }

       

        .core-value-card {

            background-color: #f8f9fa;

            border-radius: 8px;

            padding: 20px;

            width: calc(50% - 20px);

            box-shadow: 0 2px 5px rgba(0,0,0,0.1);

        }

       

        .core-value-title {

            font-weight: bold;

            color: var(--primary-color);

            margin-bottom: 10px;

        }

       

        /* HIPAA Checklist */

        .hipaa-checklist {

            list-style-type: none;

            padding: 0;

        }

       

        .hipaa-checklist li {

            padding: 8px 0;

            position: relative;

            padding-left: 30px;

        }

       

        .hipaa-checklist li:before {

            content: "✓";

            color: var(--success-color);

            font-weight: bold;

            position: absolute;

            left: 0;

        }

    </style>

</head>

<body>

    <!-- Sidebar Navigation -->

    <div id="sidebar">

        <h2>Suffolk Primary Health</h2>

        <input type="text" id="search-box" placeholder="Search...">

        <ul class="sidebar-menu">

            <li><a href="#welcome" class="active">Welcome</a></li>

            <li>

                <div class="menu-toggle">Call Flow</div>

                <ul class="sidebar-submenu">

                    <li><a href="#new-patient">New Patient</a></li>

                    <li><a href="#schedule-appointment">Schedule Appointment</a></li>

                    <li><a href="#cancel-appointment">Cancel Appointment</a></li>

                    <li><a href="#confirm-appointment">Confirm Appointment</a></li>

                    <li><a href="#medication-requests">Medication Requests</a></li>

                    <li><a href="#third-party-requests">Third Party Requests</a></li>

                    <li><a href="#sick-and-pain">Sick and Pain</a></li>

                </ul>

            </li>

            <li><a href="#ecw-guide">ECW Guide</a></li>

            <li><a href="#hospital-documents">Hospital Documents</a></li>

            <li><a href="#staff-extensions">Staff Extensions</a></li>

            <li><a href="#key-notes">Key Notes</a></li>

            <li><a href="#insurance-portals">Insurance Portals</a></li>

            <li><a href="#appointment-guide">Appointment Guide</a></li>

            <li><a href="#complaints">Complaints</a></li>

            <li><a href="#hipaa">HIPAA Information</a></li>

            <li><a href="#weekly-updates">Weekly Updates</a></li>

        </ul>

    </div>

 

    <!-- Main Content -->

    <div id="main-content">

        <!-- Welcome Section -->

        <div class="section" id="welcome">

            <h1>Welcome to Suffolk Primary Health</h1>

            <div id="welcome-container"></div>

            <div id="intro-container"></div>

            <h2>Our Core Values</h2>

            <div id="core-values-container" class="core-values-container"></div>

            <div id="why-you-matter-container"></div>

            <div id="closing-container"></div>

        </div>

 

        <!-- Call Flow Sections -->

        <div class="section" id="new-patient">

            <h2>New Patient Process</h2>

            <div id="new-patient-container"></div>

        </div>

       

        <div class="section" id="schedule-appointment">

            <h2>Schedule Appointment Process</h2>

            <div id="schedule-appointment-container"></div>

        </div>

       

        <div class="section" id="cancel-appointment">

            <h2>Cancel Appointment Process</h2>

            <div id="cancel-appointment-container"></div>

        </div>

       

        <div class="section" id="confirm-appointment">

            <h2>Confirm Appointment Process</h2>

            <div id="confirm-appointment-container"></div>

        </div>

       

        <div class="section" id="medication-requests">

            <h2>Medication Requests</h2>

           

            <div class="tabs">

                <div class="tab active" data-tab="med-refill">Refill Requests</div>

                <div class="tab" data-tab="med-no-refill">No Refill Available</div>

                <div class="tab" data-tab="med-not-arrived">Medication Not Arrived</div>

            </div>

           

            <div id="med-refill" class="tab-content active">

                <h3>If Patient is requesting a refill</h3>

                <div id="med-refill-container"></div>

            </div>

           

            <div id="med-no-refill" class="tab-content">

                <h3>If medication is not on the refill list</h3>

                <div id="med-no-refill-container"></div>

            </div>

           

            <div id="med-not-arrived" class="tab-content">

                <h3>If the medication didn't arrive to the pharmacy</h3>

                <div id="med-not-arrived-container"></div>

            </div>

 

            <div class="note">

                <h3>Important Notes</h3>

                <div id="medication-notes-container"></div>

            </div>

        </div>

       

        <div class="section" id="third-party-requests">

            <h2>Third Party Requests</h2>

           

            <div class="tabs">

                <div class="tab active" data-tab="medical-records">Medical Records</div>

                <div class="tab" data-tab="medical-notes">Medical Notes</div>

                <div class="tab" data-tab="other-documents">Other Documents</div>

            </div>

           

            <div id="medical-records" class="tab-content active">

                <h3>Medical Records Requests</h3>

                <div id="medical-records-container"></div>

            </div>

           

            <div id="medical-notes" class="tab-content">

                <h3>Medical Notes Requests</h3>

                <div id="medical-notes-container"></div>

            </div>

           

            <div id="other-documents" class="tab-content">

                <h3>Other Documents Requests</h3>

                <div id="other-documents-container"></div>

            </div>

        </div>

       

        <div class="section" id="sick-and-pain">

            <h2>Sick and Pain Visits</h2>

           

            <div class="tabs">

                <div class="tab active" data-tab="sick-pain-questions">Identifying Symptoms</div>

                <div class="tab" data-tab="sick-pain-process">Process</div>

                <div class="tab" data-tab="hospital-followup">Hospital Follow-Up</div>

                <div class="tab" data-tab="medical-transportation">Medical Transportation</div>

            </div>

           

            <div id="sick-pain-questions" class="tab-content active">

                <h3>Identifying Sick or Pain Symptoms</h3>

                <div id="sick-pain-questions-container"></div>

            </div>

           

            <div id="sick-pain-process" class="tab-content">

                <h3>Process for Sick or Pain Visits</h3>

                <div id="sick-pain-process-container"></div>

            </div>

           

            <div id="hospital-followup" class="tab-content">

                <h3>Hospital Follow-Up</h3>

                <div id="hospital-followup-container"></div>

            </div>

           

            <div id="medical-transportation" class="tab-content">

                <h3>Medical Transportation</h3>

                <div id="medical-transportation-container"></div>

            </div>

        </div>

 

        <!-- ECW Guide Section -->

        <div class="section" id="ecw-guide">

            <h2>ECW Guide</h2>

            <div id="ecw-general-tips-container"></div>

           

            <div class="tabs">

                <div class="tab active" data-tab="ecw-adding-patient">Adding New Patient</div>

                <div class="tab" data-tab="ecw-scheduling">Scheduling</div>

                <div class="tab" data-tab="ecw-cancelling">Cancelling/Rescheduling</div>

                <div class="tab" data-tab="ecw-common-scenarios">Common Scenarios</div>

            </div>

           

            <div id="ecw-adding-patient" class="tab-content active">

                <h3>Adding a New Patient</h3>

                <div id="ecw-adding-patient-container"></div>

            </div>

           

            <div id="ecw-scheduling" class="tab-content">

                <h3>Scheduling Appointments</h3>

                <div id="ecw-scheduling-container"></div>

            </div>

           

            <div id="ecw-cancelling" class="tab-content">

                <h3>Cancelling or Rescheduling</h3>

                <div id="ecw-cancelling-container"></div>

            </div>

           

            <div id="ecw-common-scenarios" class="tab-content">

                <h3>Common Scenarios</h3>

                <div id="ecw-common-scenarios-container"></div>

            </div>

        </div>

 

        <!-- Hospital Documents Section -->

        <div class="section" id="hospital-documents">

            <h2>Common Hospital to Clinic Medical Document Requests</h2>

            <div id="hospital-docs-intro-container"></div>

           

            <div id="hospital-docs-types-container"></div>

           

            <h3>Why These Requests Matter</h3>

            <div id="hospital-docs-importance-container"></div>

           

            <h3>Agent Tips</h3>

            <div id="hospital-docs-tips-container"></div>

        </div>

       

        <!-- Staff Extensions Section -->

        <div class="section" id="staff-extensions">

            <h2>Staff Extensions</h2>

            <table id="staff-extensions-table">

                <thead>

                    <tr>

                        <th>Staff</th>

                        <th>Extension</th>

                        <th>Department/Responsibilities</th>

                    </tr>

                </thead>

                <tbody id="staff-extensions-body">

                    <!-- Staff data will be dynamically inserted here -->

                </tbody>

            </table>

        </div>

       

        <!-- Key Notes Section -->

        <div class="section" id="key-notes">

            <h2>Key Notes</h2>

            <div id="key-notes-container"></div>

        </div>

       

        <!-- Insurance Portals Section -->

        <div class="section" id="insurance-portals">

            <h2>Insurance Portals</h2>

           

            <div class="tabs">

                <div class="tab active" data-tab="accepted-insurances">Accepted Insurances</div>

                <div class="tab" data-tab="pending-verification">Pending Verification</div>

                <div class="tab" data-tab="not-accepted">Not Accepted</div>

                <div class="tab" data-tab="special-notes">Special Notes</div>

            </div>

           

            <div id="accepted-insurances" class="tab-content active">

                <h3>Accepted Insurances</h3>

                <table>

                    <thead>

                        <tr>

                            <th>Insurance Name</th>

                            <th>Portal Name</th>

                            <th>Website</th>

                            <th>PCP Change Required</th>

                            <th>Notes</th>

                        </tr>

                    </thead>

                    <tbody id="accepted-insurances-body">

                        <!-- Insurance data will be dynamically inserted here -->

                    </tbody>

                </table>

            </div>

           

            <div id="pending-verification" class="tab-content">

                <h3>Pending Verification</h3>

                <table>

                    <thead>

                        <tr>

                            <th>Insurance Name</th>

                            <th>Portal Name</th>

                            <th>Website</th>

                            <th>Status</th>

                        </tr>

                    </thead>

                    <tbody id="pending-verification-body">

                        <!-- Insurance data will be dynamically inserted here -->

                    </tbody>

                </table>

            </div>

           

            <div id="not-accepted" class="tab-content">

                <h3>Not Accepted Insurances</h3>

                <table>

                    <thead>

                        <tr>

                            <th>Insurance Name</th>

                            <th>Reason</th>

                        </tr>

                    </thead>

                    <tbody id="not-accepted-body">

                        <!-- Insurance data will be dynamically inserted here -->

                    </tbody>

                </table>

            </div>

           

            <div id="special-notes" class="tab-content">

                <h3>Special Notes</h3>

                <div id="special-notes-container"></div>

            </div>

        </div>

       

        <!-- Appointment Guide Section -->

        <div class="section" id="appointment-guide">

            <h2>Appointment Guide</h2>

           

            <div class="tabs">

                <div class="tab active" data-tab="visit-types">Visit Types</div>

                <div class="tab" data-tab="sonograms">Sonograms</div>

                <div class="tab" data-tab="visit-statuses">Visit Statuses</div>

            </div>

           

            <div id="visit-types" class="tab-content active">

                <h3>Visit Types</h3>

                <table>

                    <thead>

                        <tr>

                            <th>Visit Type</th>

                            <th>Description</th>

                            <th>Duration</th>

                            <th>Extra Info</th>

                            <th>Rules</th>

                        </tr>

                    </thead>

                    <tbody id="visit-types-body">

                        <!-- Visit types will be dynamically inserted here -->

                    </tbody>

                </table>

            </div>

           

            <div id="sonograms" class="tab-content">

                <h3>Sonograms</h3>

                <table>

                    <thead>

                        <tr>

                            <th>Type</th>

                            <th>Description</th>

                            <th>Duration</th>

                            <th>Preparation</th>

                            <th>Notes</th>

                        </tr>

                    </thead>

                    <tbody id="sonograms-body">

                        <!-- Sonograms will be dynamically inserted here -->

                    </tbody>

                </table>

            </div>

           

            <div id="visit-statuses" class="tab-content">

                <h3>Visit Statuses</h3>

                <table>

                    <thead>

                        <tr>

                            <th>Status</th>

                            <th>Description</th>

                            <th>Notes</th>

                            <th>Form</th>

                        </tr>

                    </thead>

                    <tbody id="visit-statuses-body">

                        <!-- Visit statuses will be dynamically inserted here -->

                    </tbody>

                </table>

            </div>

        </div>

 

        <!-- Complaints Section -->

        <div class="section" id="complaints">

            <h2>Complaints Process</h2>

            <div id="complaints-container"></div>

        </div>

 

        <!-- HIPAA Information Section -->

        <div class="section" id="hipaa">

            <h2>General HIPAA Information</h2>

            <div id="hipaa-intro-container"></div>

           

            <h3>What is Protected Health Information (PHI)?</h3>

            <div id="hipaa-phi-container"></div>

           

            <h3>Your HIPAA Responsibilities</h3>

            <div id="hipaa-responsibilities-container"></div>

           

            <h3>What to Do If You Suspect a Breach</h3>

            <div id="hipaa-breach-container"></div>

           

            <h3>Empathy and HIPAA</h3>

            <div id="hipaa-empathy-container"></div>

           

            <h3>Quick HIPAA Checklist</h3>

            <div id="hipaa-checklist-container"></div>

           

            <h3>Resources</h3>

            <div id="hipaa-resources-container"></div>

        </div>

       

        <!-- Weekly Updates Section -->

        <div class="section" id="weekly-updates">

            <h2>Weekly Updates</h2>

            <div class="updates-container" id="weekly-updates-container"></div>

        </div>

    </div>

 

    <script>

        // This would be your JSON data loaded from an external file in a real implementation

        const jsonData = {

  "WhoIsSuffolkPrimaryHealth": {

    "WelcomeMessage": "Welcome to the Suffolk Primary Health Family! 🌟",

    "Intro": [

      "A Quick & Heartfelt Intro for Our Call Center Team",

      "At Suffolk Primary Health, we're not just healthcare providers—we're neighbors, allies, and advocates for the communities we serve. With clinics in Riverhead and Hempstead, NY, our mission is to offer kind, affordable, and high-quality care to everyone who walks through our doors (or calls us!).",

      "Our Roots: While our exact founding year is tucked in the archives, our heart has always been in serving Long Island's underserved communities—especially those on Medicaid, Medicare, or without easy access to care.",

      "Why We're Here: To break down barriers to healthcare—whether that's cost, language, or confusion about insurance.",

      "Fun Fact: Many of our patients have been with us for years—they're like family!"

    ],

    "CoreValues": [

      { "CareLikeFamily": "Treat every caller with the same patience and respect you'd give your grandma or best friend. Many are nervous, frustrated, or unsure—your voice might be their first glimpse of our clinic's warmth!" },

      { "CommunityFirst": "We're deeply rooted in Riverhead and Hempstead—towns where healthcare isn't always easy to find. Your work helps keep our neighbors healthy!" },

      { "NoStressNoJudgement": "Many patients are low-income, elderly, or non-English speakers. A little extra kindness ('Take your time—I'm here to help!') goes a long way." },

      { "PreventionIsPower": "We believe in catching problems early. Gently remind callers: 'Your annual check-up is the best gift you can give your future self!'" }

    ],

    "QuickHistoryGrowth": [

      "Started as a small primary care practice in Long Island, expanding to serve more high-need areas.",

      "Became a trusted resource for low-income and uninsured patients, focusing on accessibility and affordability.",

      "Developed a strong network of providers and specialists to ensure comprehensive care.",

      "Grew from a single clinic to two locations in Riverhead and Hempstead, NY",

      "Calming Fears: 'I know insurance can be confusing—that's why I'm here! Let's figure this out step by step.'"

    ],

    "WhyYouMatter": [

      "You're the voice of comfort in a confusing healthcare world.",

      "You're the bridge between our doctors and the community.",

      "You're changing lives—one call at a time!",

      "Team Mantra: 'Every call is a chance to make someone's day—and their health—better.'"

    ],

    "Closing": [

      "Let's Grow Together!",

      "We're always learning and improving. If you have ideas, questions, or just want to share a success story, reach out to your supervisor or the team.",

      "Thank you for being the heart of Suffolk Primary Health! Together, we're making healthcare accessible, friendly, and effective for everyone in our community. 💙"

    ]

  },

  "CallFlow": {

    "NewPatient": {

      "steps": [

        "Ask for insurance ID and check eligibility via portals (Availity, ePACES, UHC, Fidelis), check InsurancePortals tab in this Document",

        "Go to the insurance portals and check the eligibility of the patient",

        "If the patient is not eligible, due to insurance inactive no insurance, or SUFFOLK not accepted insurance (see InsurancePortals tab in this Document)",

        "Inform the patient that, He/she is to pay for the appointment provide cost in SelfPayPricing tab in this Document",

        "If the patient is eligible, and has one of our PCP's (Simon/Ilan), Proceed to the next step",

        "If the patient is eligible but has a different PCP",

        "Inform the patient to call insurance to change their PCP to Simon/Ilan (see InsurancePortals tab in this Document)",

        "The insurance will provide a confirmation number to PT, at that moment PT can take it to the appointment or call us to provide it",

        "Go to ECW and create a new patient profile (ADD) the patient's demographics, and follow along ECW prompts",

        "Remember that, all new patients must be seen by a Dr as NP Annual Visit (NPANNVISIT) in ECW",

        "Visit Status (PENDING or PCP(CHANGE)",

        "Schedule the appointment in ECW for the NP Annual Visit (NPANNVISIT)",

        "If the patient is underage, inform them that a legal guardian must be present for all visits",

        "Leave notes in ECW General Notes"

      ]

    },

    "ScheduleAppointment": {

      "steps": [

        "Ask for the patient's name and date of birth to find their profile in ECW check who the PT has been seeing from previous visits",

        "Ask for the reason of the appointment",

        "Identify whether it's a regular visit, sick visit, or follow-up",

        "Check Dr's availability in ECW. Remember to confirm the facility location of choice (Hempstead or Riverhead)",

        "Check the visit type in the AppointmentGuide tab in this Document and the time duration to schedule the appointment accordingly",

        "Schedule the appointment in ECW ask Line Up questions and confirm the appointment details with the patient:",

        "Finally send an SMS confirmation in ECW"

      ]

    },

    "CancelAppointment": {

      "steps": [

        "Find the appointment in ECW using the patient's date of birth and name",

        "Suggest to reschedule the appointment for a later date",

        "Go to ECW, and from the visit status dropdown, select CANCEL(PHONECAN) or R/S (RESCHEDULE)",

        "Leave notes in ECW General Notes",

        "Record in Cancellation Reason.xlsx (date, reason, staff initials)"

      ]

    },

    "ConfirmAppointment": {

      "steps": [

        "Find the appointment in ECW using the patient's date of birth and name",

        "If there's no appointment, suggest to schedule one otherwise, confirm the information with the patient",

        "If the appointment is found please confirm the following information with the patient:",

        "Scheduled appointment date, time, type of visit, and location",

        "Go to ECW, and from the visit status dropdown, confirm the appointment CONFIRM(VOICE)",

        "Leave notes in ECW General Notes"

      ]

    },

    "MedicationRequests": {

      "steps": {

        "If Patient is requesting a refill": [

          "Check if medication is on the refill list",

          "If yes, confirm the pharmacy address in ECW",

          "If yes, send refill request to pharmacy",

          "Leave notes in ECW General Notes"

        ],

        "If medication is not on the refill list": [

          "Check if the patient has an appointment with the prescribing provider within 30 days",

          "If no, inform the patient that they need to schedule an appointment with the prescribing provider to request a refill",

          "If yes, inform the patient to discuss at their next visit",

          "Leave notes in ECW General Notes"

        ],

        "If the medication didn't arrive to the pharmacy": [

          "Confirm the pharmacy address in ECW",

          "If the address is correct, send a TeleEncounter to the doctor's MA and the prescription's name and dosage",

          "Leave notes in ECW General Notes"

        ]

      },

      "Notes": [

        "Always verify the patient's identity (full name, DOB) before accessing or sharing information.",

        "Remember that, we cannot book an appointment with from a patient that has been hospitalized due to a car accident, work-related accident, or any other type of accident nor pregnancy-related issues.",

        "Always check TEAMS for the latest updates and protocols before scheduling an appointment.",

        "Contact the front desk, or your supervisor if you need assistance with a specific request or if you are unsure about the process to follow.",

        "Leave notes in ECW General Notes for every interaction with the patient.",

        "Finally, BE POLITE and EMPATHETIC with the patients, they are calling for help and we are here to assist them."

      ]

    },

    "ThirdPartyRequests": {

      "MedicalRecords": [

        "Confirm the caller's name and entity (e.g., insurance, employer)",

        "Confirm the patient's identity (DOB, name)",

        "Confirm that we have the patient's records",

        "If we have the records, send them via fax or email as requested",

        "If we don't have the records, contact front desk to check if they can be obtained or send a TeleEncounter to the doctor's MA to check with the request details",

        "Inform the caller that we will be sending them via fax or email as requested",

        "Leave notes in ECW General Notes"

      ],

      "MedicalNotes": [

        "Confirm the caller's name and entity (e.g., insurance, employer)",

        "Confirm the patient's identity (DOB, name)",

        "Check if the medical note is available in ECW",

        "If available, send the note via fax or email as requested",

        "If not available, contact front desk to check if it can be obtained or send a TeleEncounter to the doctor's MA to check with the request details",

        "Inform the caller that we will be sending them via fax or email as requested",

        "Leave notes in ECW General Notes"

      ],

      "OtherDocuments": [

        "Confirm the caller's name and entity (e.g., insurance, employer)",

        "Confirm the patient's identity (DOB, name)",

        "Check if the document is available in ECW",

        "If available, send the document via fax or email as requested",

        "If not available, contact front desk and send a TeleEncounter to Karen Santos (Ext 102) with detail information about the request",

        "Inform the caller that we will be sending them via fax or email as requested",

        "Leave notes in ECW General Notes"

      ]

    },

    "SickAndPain": {

      "IdentifyingSymptoms": [

        "Ask the patient to describe their symptoms",

        "Identify if the patient is sick or in pain by asking the following questions:",

        "SickVisitQuestions = ['Fever?', 'Cough?', 'Sore throat?', 'Runny nose?', 'Vomiting/diarrhea?']",

        "PainVisitQuestions = ['Duration?', 'Nerve pain?', 'Related to accident? (If yes, redirect to ER)']",

        "Remember that, patients that been in a car accident, work related accident, must be redirected to the ER!"

      ],

      "Process": [

        "Don't book an appointment in ECW",

        "Gather the following information:",

        "Date, your name, patient name, DOB, sick/pain, provider, Ev eligibility, symptoms, duration, additional notes(language, etc.)",

        "Fill out the Google Form with the patient's details and symptoms",

        "Tell the patient that they will be contacted by one of our specialized representatives of Suffolk Primary Health within 5 to 10 minutes",

        "Leave notes in ECW General Notes"

      ],

      "HospitalFollowUp": [

 

         "Ask the patient how long ago they were discharged from the hospital",

        "If it was within the last 10 days, ask them to bring their discharge paperwork to the visit",

        "If it was more than 10 days ago, book a regular appointment in ECW /sick or /pain"

      ],

      "MedicalTransportation": [

        "Gather the patient information",

        "Confirm the address, and make sure it is correct",

        "Send a TeleEncounter to Karen S with all the details needed",

        "The patient has to get in contact with insurance for transportation",

        "Ask the patient how long ago they were discharged from the hospital"

      ]

    }

  },

  "ECWGuide": {

    "GeneralTips": [

      "Always verify the patient's identity (full name, DOB, phone number) before accessing or sharing information.",

      "Keep the ECW platform open and logged in during your shift for quick access.",

      "Use the search bar to quickly find patients by name or date of birth.",

      "Document every interaction in 'General Notes' for future reference.",

      "If unsure about a process, check the ECW help section or ask a supervisor."

    ],

    "AddingNewPatient": [

      "Click the 'ADD' button to create a new profile.",

      "Enter all demographic information accurately (name, DOB, address, phone, insurance details).",

      "Assign the correct PCP (Simon/Ilan) as required.",

      "Set the patient status to 'New Patient'.",

      "Schedule the appointment as 'NP Annual Visit' (NPANNVISIT).",

      "Remind the patient to bring their insurance card and ID to the appointment.",

      "Leave a note in 'General Notes' summarizing the registration and appointment."

    ],

    "SchedulingAppointment": [

      "Search for the patient using their name or DOB.",

      "Confirm the reason for the appointment (regular, sick, follow-up, etc.).",

      "Check provider and facility availability (Hempstead or Riverhead).",

      "Select the correct visit type and duration from the Appointment Guide.",

      "Ask all required 'Line Up' questions and confirm details with the patient.",

      "Schedule the appointment and send an SMS confirmation if possible.",

      "Document the appointment details in 'General Notes'."

    ],

    "CancellingRescheduling": [

      "Find the appointment using the patient's profile.",

      "Suggest rescheduling if possible.",

      "In the visit status dropdown, select CANCEL (PHONECAN) or R/S (RESCHEDULE).",

      "Record the reason for cancellation in 'General Notes' and in Cancellation Reason.xlsx.",

      "Confirm the patient receives a new appointment date if rescheduled."

    ],

    "CommonScenarios": {

      "NewPatientRegistration": [

        "Follow the 'Adding a New Patient' steps.",

        "Check insurance eligibility before scheduling.",

        "Remind about required documents (ID, insurance card)."

      ],

      "AppointmentScheduling": [

        "Clarify the reason for the visit.",

        "Check provider and location availability.",

        "Confirm all details and send confirmation."

      ],

      "MedicationRefillRequest": [

        "Check if the medication is on the refill list.",

        "If yes, confirm pharmacy and send refill.",

        "If not, check if a provider visit is needed.",

        "Document all actions in 'General Notes'."

      ],

      "LabResultsOrOrders": [

        "Check 'Orders' and 'Documents' for lab results.",

        "If results are available, inform the patient or schedule a results visit.",

        "If not, advise the patient on next steps."

      ],

      "InsuranceOrBillingQuestions": [

        "Verify insurance in the 'Insurance' tab.",

        "For billing, refer to the Billing Dept (Ext 186) if needed.",

        "Document the inquiry and any advice given."

      ],

      "MedicalRecordsOrDocumentRequests": [

        "Verify caller and patient identity.",

        "Check if the document is available in 'Documents'.",

        "Send via fax/email as requested and document the action."

      ]

    }

  },

  "HospitalDocuments": {

    "Intro": [

      "Hospitals often call our clinic to request specific medical documents for patients who are being admitted, need surgery, or require ongoing care. Providing the right documents quickly helps ensure patient safety, smooth transitions, and avoids delays in treatment or discharge."

    ],

    "DocumentTypes": [

      {

        "name": "Medical Notes (Clinical Notes)",

        "what_it_is": "A summary of the patient's diagnoses, treatments, progress, and care plan from their clinic visits.",

        "types_included": [

          "Office Visit Notes (SOAP notes: Subjective, Objective, Assessment, Plan)",

          "Consultation Notes (from specialists)",

          "Procedure Notes (e.g., biopsies, vaccinations)"

        ],

        "why_hospitals_ask": [

          "To ensure continuity of care (e.g., if a patient is admitted after a clinic visit).",

          "To review chronic conditions (e.g., diabetes, hypertension) or prior treatments."

        ]

      },

      {

        "name": "Medical Clearance (Preoperative/Preadmission Clearance)",

        "what_it_is": "A provider's approval that a patient is healthy enough for surgery or a procedure.",

        "key_details_included": [

          "Cardiac/Pulmonary Risk Assessment (e.g., ECG, echo results).",

          "Medication List (especially blood thinners, insulin).",

          "Comorbidities (e.g., uncontrolled diabetes, COPD)."

        ],

        "why_hospitals_ask": [

          "To reduce surgical risks (e.g., heart attack, infection).",

          "Required for elective surgeries (e.g., joint replacements)."

        ]

      }

    ],

    "WhyTheseRequestsMatter": [

      "Avoid Delays: Missing documents can postpone surgeries or discharge.",

      "Patient Safety: Ensures accurate meds, allergies, and risks are known.",

      "Billing Compliance: Referrals/authorizations prevent claim denials."

    ],

    "AgentTips": [

      "When hospitals call, always ask for the specific document name and urgency level (e.g., 'STAT clearance for emergency surgery').",

      "Clarify if the request is for a recent visit, a specific provider, or a particular date range.",

      "Be empathetic—these requests are often urgent and impact patient care.",

      "Document the request in ECW General Notes and notify the appropriate staff (e.g., front desk, provider, or medical records)."

    ]

  },

  "StaffExtensions": [

    {

      "Staff": "Call Center- Paola",

      "Ext": "101"

    },

    {

      "Staff": "Fernando",

      "Ext": "102"

    },

    {

      "Staff": "Call Center- Karen",

      "Ext": "103"

    },

    {

      "Staff": "Front Desk- Jennifer",

      "Ext": "104"

    },

    {

      "Staff": "Front Desk- Rosana",

      "Ext": "105"

    },

    {

      "Staff": "Front Desk- Rina",

      "Ext": "106"

    },

    {

      "Staff": "Lab",

      "Ext": "107"

    },

    {

      "Staff": "Doreen - H Admin",

      "Ext": "109"

    },

    {

      "Staff": "Call Center- Elvis",

      "Ext": "110"

    },

    {

      "Staff": "Jessica Jaramillo / Khristy - FD H",

      "Ext": "122"

    },

    {

      "Staff": "Dorian Mejia - FD H",

      "Ext": "123"

    },

    {

      "Staff": "Diego Cruz",

      "Ext": "135"

    },

    {

      "Staff": "Lashanta Kang",

      "Ext": "154"

    },

    {

      "Staff": "Alejandra Dominguez - PC",

      "Ext": "155"

    },

    {

      "Staff": "Karina Rodriguez - PC",

      "Ext": "156"

    },

    {

      "Staff": "Benjamin Penn PA",

      "Ext": "157"

    },

    {

      "Staff": "Yolette Georges PA",

      "Ext": "158"

    },

    {

      "Staff": "Naomi Mazlin",

      "Ext": "159"

    },

    {

      "Staff": "Anaica Allen",

      "Ext": "160"

    },

    {

      "Staff": "Stephanie - PC",

      "Ext": "161"

    },

    {

      "Staff": "Rochelle Paredes",

      "Ext": "163"

    },

    {

      "Staff": "Gerardo Biasella",

      "Ext": "135",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Matias Cordero",

      "Ext": "140",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Rocio Funes",

      "Ext": "143",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Martina Tripicchio",

      "Ext": "144",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Ana Cornu",

      "Ext": "150",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Anto Capurro",

      "Ext": "153",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Anto Gagliano",

      "Ext": "126",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Barbi Veliz",

      "Ext": "132",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Joaco Herrera",

      "Ext": "149",

      "Department": "QCM and Conf Team"

    },

    {

      "Staff": "Karen Santos",

      "Ext": "102",

      "Responsibilities": "Medicaid transport, medical records"

    },

    {

      "Staff": "Agustina Colomer",

      "Ext": "186",

      "Responsibilities": "Billing questions/payments"

    }

  ],

  "KeyNotes": {

    "MedicaidTransportation": "Assign to Karen Santos (Ext 102) with pick-up/drop-off addresses",

    "HospitalFollowUps": "Patients must bring discharge paperwork (remind in notes)",

    "UnderagePatients": "Require legal guardian present for all visits",

    "FrontDeskExtensions": {

      "Riverhead": "104, 105, and 107 for general front desk",

      "Hempstead": "122 and 123 (no names assigned)"

    }

  },

  "InsurancePortals": {

    "navigation_guide": [

      "General Steps to Check Insurance Eligibility and Coverage:",

      "1. Log in to the appropriate insurance portal (see 'portal_name' and 'website' above).",

      "2. Use the patient's insurance ID, name, and date of birth to search for their profile.",

      "3. Confirm the insurance is ACTIVE. Look for eligibility status or coverage dates.",

      "4. Check the assigned PCP (Primary Care Provider). If not Simon/Ilan, advise the patient to update PCP if required.",

      "5. Verify if Suffolk Primary Health (or your clinic) is IN NETWORK. Look for network status or provider search tools.",

      "6. Review the type of coverage: Look for visit types (Annual Physical, Sick Visit, Specialist, etc.) and confirm if the requested service is covered.",

      "7. Check for co-insurance percentage (%) and copay amount ($) for the visit type. This is usually under 'Benefits', 'Coverage', or 'Patient Responsibility'.",

      "8. Download or screenshot the eligibility/benefits summary for documentation if needed.",

      "9. Document all findings in the patient's record and inform the patient of any issues or out-of-pocket costs."

    ],

    "accepted_insurances": [

      {

        "insurance_name": "Aetna",

        "portal_name": "Availity",

        "website": https://www.availity.com,

        "pcp_change_required": false,

        "notes": "Meritan plans do not require PCP change"

      },

      {

        "insurance_name": "Carelon",

        "portal_name": "Availity",

        "website": https://www.availity.com,

        "pcp_change_required": false,

        "notes": ""

      },

      {

        "insurance_name": "Cigna",

        "portal_name": "Availity",

        "website": https://cignaforhcp.cigna.com,

        "pcp_change_required": false,

        "notes": "PCP change not required"

      },

      {

        "insurance_name": "Empire Plan",

        "portal_name": "Availity",

        "website": https://www.availity.com,

        "pcp_change_required": false,

        "notes": "Empire NYSHIP PPO doesn't require PCP"

      },

      {

        "insurance_name": "Fidelis Medicaid",

        "portal_name": "Fidelis",

        "website": https://www.fideliscare.org,

        "pcp_change_required": false,

        "notes": "Essential Plan doesn't require PCP"

      },

      {

        "insurance_name": "HealthFirst",

        "portal_name": "Availity",

        "website": https://www.availity.com,

        "pcp_change_required": true,

        "notes": "PCP must be Dr. Simon/Ilan"

      },

      {

        "insurance_name": "Magnacare",

        "portal_name": "Magnacare",

        "website": https://www.magnacare.com,

        "pcp_change_required": false,

        "notes": ""

      },

      {

        "insurance_name": "Medicare of NY",

        "portal_name": "Connex (NGS)",

        "website": https://www.ngsmedicare.com,

        "pcp_change_required": false,

        "notes": ""

      },

      {

        "insurance_name": "Medicaid",

        "portal_name": "ePACES",

        "website": https://www.emedny.org,

        "pcp_change_required": false,

        "notes": ""

      },

      {

        "insurance_name": "United HealthCare",

        "portal_name": "UHC",

        "website": https://www.uhcprovider.com,

        "pcp_change_required": true,

        "notes": "Excluding Commercial plans"

      }

    ],

    "pending_verification": [

      {

        "insurance_name": "Centers Plan",

        "portal_name": "Centers Plan",

        "website": "Pending",

        "status": "TBC"

      },

      {

        "insurance_name": "ElderPlan",

        "portal_name": "ElderPlan",

        "website": "Pending",

        "status": "TBC"

      }

    ],

    "not_accepted": [

      {

        "insurance_name": "UHC Commercial Plan",

        "reason": "Not accepted per clinic policy"

      },

      {

        "insurance_name": "WellCare",

        "reason": "Currently not accepting"

      },

      {

        "insurance_name": "Oxford",

        "reason": "All Oxford plans excluded"

      },

      {

        "insurance_name": "MetroPlus",

        "reason": "Not in network"

      },

      {

        "insurance_name": "Tricare",

        "reason": "Military insurance not accepted"

      }

    ],

    "special_notes": {

      "pcp_requirements": "Medicare, Medicaid, MAP and MCO PPO/POS/EPO plans do not require PCP on file",

      "verification_process": "Always check eligibility 4+ days before appointment",

      "self_pay_options": "Available for patients with inactive insurance"

    }

  },

  "AppointmentGuide": {

    "visit_types": [

      {

        "visit_type": "1 Month F/U",

        "description": "1 Month follow up",

        "duration": "15 minutes",

        "extra_info": "Provider ordered a F/U in 1 month, PT wants to see the Dr to discuss a treatment, PT wants a referral",

        "rules": "Explain the reason for F/U (DM2, HTN, HLD, Hypo/parathyroid, BPH, Anxiety, Pain, Birth control, etc.)"

      },

      {

        "visit_type": "2 Weeks F/U",

        "description": "2 Weeks follow up",

        "duration": "15 minutes",

        "extra_info": "Provider ordered a F/U in 2 weeks, PT wants to see the Dr to discuss a treatment, PT wants a referral",

        "rules": "Explain the reason for F/U (DM2, HTN, HLD, Hypo/parathyroid, BPH, Anxiety, Pain, Birth control, etc.)"

      },

      {

        "visit_type": "3 Month F/U",

        "description": "3 month follow up",

        "duration": "15 minutes",

        "extra_info": "Provider ordered a F/U in 3 months, PT wants to see the Dr to discuss a treatment, PT wants a referral",

        "rules": "Explain the reason for F/U (DM2, HTN, HLD, Hypo/parathyroid, BPH, Anxiety, Pain, Birth control, etc.)"

      },

      {

        "visit_type": "6 Month F/U",

        "description": "6 month follow up",

        "duration": "15 minutes",

        "extra_info": "Provider ordered a F/U in 6 months, PT wants to see the Dr to discuss a treatment, PT wants a referral",

        "rules": "Explain the reason for F/U (DM2, HTN, HLD, Hypo/parathyroid, BPH, Anxiety, Pain, Birth control, etc.)"

      },

      {

        "visit_type": "ANN VISIT",

        "description": "Annual visit (Complete Physical Exam - CPE)",

        "duration": "15 minutes",

        "extra_info": "Every 365 +1 days (patients under 18 can have one per calendar year)",

        "rules": "NO OTHER Complaints or CONCERNS. All Annual Visits / CPE must be more the 11 Month apart, No booking if its any closer. Please advise pt to wear loose clothing (no corsets or one pieces) and no body oils nor lotions because it will affect the EKG process and results."

      }

    ],

    "sonograms": [

      {

        "type": "ABD",

        "description": "Abdominal",

        "duration": "20 minutes",

        "preparation": "Nothing to eat 6 hours prior to exam, water only and should be kept to a minimum"

      },

      {

        "type": "AOR",

        "description": "Aorta",

        "duration": "15 minutes",

        "preparation": "Nothing to eat 6 hours prior to exam, water only and should be kept to a minimum"

      },

      {

        "type": "ART LE",

        "description": "Arterial Lower Extremity",

        "duration": "20 minutes",

        "preparation": ""

      },

      {

        "type": "ART UE",

        "description": "Arterial Upper Extremity",

        "duration": "20 minutes",

        "preparation": ""

      },

      {

        "type": "BLADDER",

        "description": "Bladder",

        "duration": "20 minutes",

        "preparation": ""

      },

      {

        "type": "CARO",

        "description": "Carotid",

        "duration": "20 minutes",

        "preparation": "No preparation necessary"

      }

    ],

    "visit_statuses": [

      {

        "status": "CANCSAMEDA",

        "description": "Cancelled Same Day",

        "notes": "PT calls same day of the appt to cancel it (Must fill out form with reason of cancellation)",

        "form": "Cancellation Reason.xlsx"

      },

      {

        "status": "CONFPHONE",

        "description": "Confirmed by Phone",

        "notes": "Appt was confirmed over the phone",

        "form": ""

      },

      {

        "status": "CONFSMS",

        "description": "Confirmed by SMS",

        "notes": "Appt was confirmed by SMS",

        "form": ""

      },

      {

        "status": "FAILEDMSG",

        "description": "Unable to reach patient",

        "notes": "We called but PT didn't answer and there's no mail box",

        "form": ""

      }

    ]

  },

  "Complaints": {

    "HowToSubmit": [

      "1. Fill out the Following complaint form: https://forms.office.com/r/3b0a1c6d8f",

      "2. Gather the patient's information including name, date of birth, and contact details",

      "3. Provide a detailed description of the complaint, including dates, times, and any relevant interactions",

      "4. Submit the form.",

      "5. It is important to empathize with the patient and assure them that their complaint will be taken seriously and addressed promptly."

    ]

  },

  "HIPAA": {

    "Intro": [

      "HIPAA (Health Insurance Portability and Accountability Act) is a federal law that protects patient privacy and ensures their health information is kept secure.",

      "As a call center agent, you play a key role in protecting our patients' sensitive information every day."

    ],

    "WhatIsPHI": [

      "Protected Health Information (PHI) includes any information that can identify a patient and relates to their health, care, or payment for care.",

      "Examples: Name, date of birth, address, phone number, insurance details, medical record number, diagnosis, treatment, and appointment information."

    ],

    "Responsibilities": [

      "Always verify the caller's identity before sharing any patient information (ask for full name, date of birth, and another identifier if needed).",

      "Never discuss patient information with anyone who is not authorized (including family, friends, or other staff without a need to know).",

      "Do not leave PHI visible on your desk, computer screen, or in public areas.",

      "Log out of systems (like ECW) when stepping away from your workstation.",

      "If you receive a request for records, always follow the clinic's verification and release process."

    ],

    "WhatToDoIfBreach": [

      "If you think PHI has been shared inappropriately (even by accident), report it immediately to your supervisor or the Privacy Officer.",

      "Do not try to handle it alone—timely reporting helps protect patients and the clinic."

    ],

    "EmpathyAndHIPAA": [

      "You can be warm and helpful while still protecting privacy. For example: 'I'd love to help, but I need to verify your identity first to keep your information safe.'",

      "If a caller is frustrated by privacy questions, reassure them: 'We ask these questions to protect your privacy and make sure only you can access your health information.'"

    ],

    "Checklist": [

      "✅ Always verify identity before sharing information.",

      "✅ Only access or share the minimum information needed to do your job.",

      "✅ Never discuss patient information in public or with unauthorized people.",

      "✅ Report any privacy concerns right away."

    ],

    "Resources": [

      "If you have questions about HIPAA or privacy, contact your supervisor or the Privacy Officer.",

      "Annual HIPAA training is required—ask if you need a refresher!"

    ]

  },

  "WeeklyUpdates": {

    "May21st": [

      "May 21st Automatic Voicemail Protocol",

      "Ask for patient's DOB and check Hub Messenger",

      "For referral messages, check Outgoing Referrals date",

      "If results are available, schedule Results visit",

      "Mention possible delays when patients provide time ranges",

      "Note time range in appointment slot Reason field"

    ],

    "May22nd": [

      "Dr. Gray leaving at 2PM (notify Sick/Pain team)",

      "Dr. Quintanilla does not give injections (only pediatric vaccines)",

      "Always specify test type in Reason field (BW/SUDO/SONO)",

      "No double booking with PRE-OP, INJ or CPE"

    ],

    "May23rd": [

      "Schedule Management",

      "Gabbi's Hempstead appointments must be marked as Hempstead facility (not SPH BH)",

      "EMG/NCV duration reduced to 15 minutes in Riverhead",

      "Insurance Updates",

      "Wellcare not currently accepted - cancel appointments until further notice"

    ],

    "May27th": [

      "Telehealth Restrictions",

      "No bookings with Dr. Gray (doesn't speak Spanish)",

      "Results Visits Protocol",

      "Verify results availability in Patient Docs before scheduling",

      "Note if patient will bring outside results"

    ],

    "May28th": [

      "Provider Availability",

      "Dr. Shivannah now only in Riverhead (telehealth Mon-Tue)",

      "Scheduling Rules",

      "No double booking with CPEs (yellow slots)",

      "Dr. Quintanilla's patient load increased to 30/day (no double booking)"

    ],

    "June4th": [

      "Provider Schedules",

      "Dr. Shivannah has afternoon meeting - limit appointments",

      "Dr. Quintanilla in Hempstead Thu/Fri (max 30 patients)",

      "UHC Security Update",

      "Password resets now require recovery code",

      "Code generation path: Profile → One HealthCare ID Page → Generate Code"

    ],

    "June13th": [

      "New Provider Hours",

      "Dr. Gray: 6AM-6PM Mon-Thu, 6AM-2PM Fri (effective next Monday)",

      "Minor Patient Policy",

      "Underage patients require legal guardian present for all visits"

    ],

    "June25th": [

      "Caller ID now shows Riverhead/Hempstead origin",

      "New SMS templates separated by location",

      "Billing Process",

      "Extension 186 active for billing questions (Agustina Colomer)"

    ]

  }

};

 

        // Function to populate the welcome section

        function populateWelcomeSection() {

            const welcomeData = jsonData.WhoIsSuffolkPrimaryHealth;

           

            // Welcome Message

            document.getElementById('welcome-container').innerHTML = `

                <div class="success">

                    <h3>${welcomeData.WelcomeMessage}</h3>

                </div>

            `;

           

            // Intro

            let introHTML = '<div class="note">';

            welcomeData.Intro.forEach(item => {

                introHTML += `<p>${item}</p>`;

            });

            introHTML += '</div>';

            document.getElementById('intro-container').innerHTML = introHTML;

           

            // Core Values

            let coreValuesHTML = '';

            welcomeData.CoreValues.forEach(value => {

                const key = Object.keys(value)[0];

                coreValuesHTML += `

                    <div class="core-value-card">

                        <div class="core-value-title">${key}</div>

                        <p>${value[key]}</p>

                    </div>

                `;

            });

            document.getElementById('core-values-container').innerHTML = coreValuesHTML;

           

            // Why You Matter

            let whyYouMatterHTML = '<div class="success"><h3>Why You Matter</h3><ul>';

            welcomeData.WhyYouMatter.forEach(item => {

                whyYouMatterHTML += `<li>${item}</li>`;

            });

            whyYouMatterHTML += '</ul></div>';

            document.getElementById('why-you-matter-container').innerHTML = whyYouMatterHTML;

           

            // Closing

            let closingHTML = '<div class="note"><h3>Closing</h3>';

            welcomeData.Closing.forEach(item => {

                closingHTML += `<p>${item}</p>`;

            });

            closingHTML += '</div>';

            document.getElementById('closing-container').innerHTML = closingHTML;

        }

       

        // Function to populate call flow sections

        function populateCallFlowSections() {

            const callFlowData = jsonData.CallFlow;

           

            // New Patient

            let newPatientHTML = '<ol>';

            callFlowData.NewPatient.steps.forEach(step => {

                newPatientHTML += `<li>${step}</li>`;

            });

            newPatientHTML += '</ol>';

            document.getElementById('new-patient-container').innerHTML = newPatientHTML;

           

            // Schedule Appointment

            let scheduleAppointmentHTML = '<ol>';

            callFlowData.ScheduleAppointment.steps.forEach(step => {

                scheduleAppointmentHTML += `<li>${step}</li>`;

            });

            scheduleAppointmentHTML += '</ol>';

            document.getElementById('schedule-appointment-container').innerHTML = scheduleAppointmentHTML;

           

            // Cancel Appointment

            let cancelAppointmentHTML = '<ol>';

            callFlowData.CancelAppointment.steps.forEach(step => {

                cancelAppointmentHTML += `<li>${step}</li>`;

            });

            cancelAppointmentHTML += '</ol>';

            document.getElementById('cancel-appointment-container').innerHTML = cancelAppointmentHTML;

           

            // Confirm Appointment

            let confirmAppointmentHTML = '<ol>';

            callFlowData.ConfirmAppointment.steps.forEach(step => {

                confirmAppointmentHTML += `<li>${step}</li>`;

            });

            confirmAppointmentHTML += '</ol>';

            document.getElementById('confirm-appointment-container').innerHTML = confirmAppointmentHTML;

           

            // Medication Requests

            const medRequests = callFlowData.MedicationRequests;

           

            // Refill Requests

            let medRefillHTML = '<ol>';

            medRequests.steps["If Patient is requesting a refill"].forEach(step => {

                medRefillHTML += `<li>${step}</li>`;

            });

            medRefillHTML += '</ol>';

            document.getElementById('med-refill-container').innerHTML = medRefillHTML;

           

            // No Refill Available

            let medNoRefillHTML = '<ol>';

            medRequests.steps["If medication is not on the refill list"].forEach(step => {

                medNoRefillHTML += `<li>${step}</li>`;

            });

            medNoRefillHTML += '</ol>';

            document.getElementById('med-no-refill-container').innerHTML = medNoRefillHTML;

           

            // Medication Not Arrived

            let medNotArrivedHTML = '<ol>';

            medRequests.steps["If the medication didn't arrive to the pharmacy"].forEach(step => {

                medNotArrivedHTML += `<li>${step}</li>`;

            });

            medNotArrivedHTML += '</ol>';

            document.getElementById('med-not-arrived-container').innerHTML = medNotArrivedHTML;

           

            // Medication Notes

            let medNotesHTML = '<ul>';

            medRequests.Notes.forEach(note => {

                medNotesHTML += `<li>${note}</li>`;

            });

            medNotesHTML += '</ul>';

            document.getElementById('medication-notes-container').innerHTML = medNotesHTML;

           

            // Third Party Requests

            const thirdPartyData = callFlowData.ThirdPartyRequests;

           

            // Medical Records

            let medicalRecordsHTML = '<ol>';

            thirdPartyData.MedicalRecords.forEach(step => {

                medicalRecordsHTML += `<li>${step}</li>`;

            });

            medicalRecordsHTML += '</ol>';

            document.getElementById('medical-records-container').innerHTML = medicalRecordsHTML;

           

            // Medical Notes

            let medicalNotesHTML = '<ol>';

            thirdPartyData.MedicalNotes.forEach(step => {

                medicalNotesHTML += `<li>${step}</li>`;

            });

            medicalNotesHTML += '</ol>';

            document.getElementById('medical-notes-container').innerHTML = medicalNotesHTML;

           

            // Other Documents

            let otherDocumentsHTML = '<ol>';

            thirdPartyData.OtherDocuments.forEach(step => {

                otherDocumentsHTML += `<li>${step}</li>`;

            });

            otherDocumentsHTML += '</ol>';

            document.getElementById('other-documents-container').innerHTML = otherDocumentsHTML;

           

            // Sick and Pain

            const sickPainData = callFlowData.SickAndPain;

           

            // Identifying Symptoms

            let sickPainQuestionsHTML = '<ol>';

            sickPainData.IdentifyingSymptoms.forEach(step => {

                sickPainQuestionsHTML += `<li>${step}</li>`;

            });

            sickPainQuestionsHTML += '</ol>';

            document.getElementById('sick-pain-questions-container').innerHTML = sickPainQuestionsHTML;

           

            // Process

            let sickPainProcessHTML = '<ol>';

            sickPainData.Process.forEach(step => {

                sickPainProcessHTML += `<li>${step}</li>`;

            });

            sickPainProcessHTML += '</ol>';

            document.getElementById('sick-pain-process-container').innerHTML = sickPainProcessHTML;

           

            // Hospital Follow-Up

            let hospitalFollowupHTML = '<ol>';

            sickPainData.HospitalFollowUp.forEach(step => {

                hospitalFollowupHTML += `<li>${step}</li>`;

            });

            hospitalFollowupHTML += '</ol>';

            document.getElementById('hospital-followup-container').innerHTML = hospitalFollowupHTML;

           

            // Medical Transportation

            let medicalTransportationHTML = '<ol>';

            sickPainData.MedicalTransportation.forEach(step => {

                medicalTransportationHTML += `<li>${step}</li>`;

            });

            medicalTransportationHTML += '</ol>';

            document.getElementById('medical-transportation-container').innerHTML = medicalTransportationHTML;

        }

       

        // Function to populate ECW Guide section

        function populateECWGuide() {

            const ecwData = jsonData.ECWGuide;

           

            // General Tips

            let generalTipsHTML = '<h3>General Tips</h3><ul>';

            ecwData.GeneralTips.forEach(tip => {

                generalTipsHTML += `<li>${tip}</li>`;

            });

            generalTipsHTML += '</ul>';

            document.getElementById('ecw-general-tips-container').innerHTML = generalTipsHTML;

           

            // Adding New Patient

            let addingPatientHTML = '<ol>';

            ecwData.AddingNewPatient.forEach(step => {

                addingPatientHTML += `<li>${step}</li>`;

            });

            addingPatientHTML += '</ol>';

            document.getElementById('ecw-adding-patient-container').innerHTML = addingPatientHTML;

           

            // Scheduling Appointments

            let schedulingHTML = '<ol>';

            ecwData.SchedulingAppointment.forEach(step => {

                schedulingHTML += `<li>${step}</li>`;

            });

            schedulingHTML += '</ol>';

            document.getElementById('ecw-scheduling-container').innerHTML = schedulingHTML;

           

            // Cancelling/Rescheduling

            let cancellingHTML = '<ol>';

            ecwData.CancellingRescheduling.forEach(step => {

                cancellingHTML += `<li>${step}</li>`;

            });

            cancellingHTML += '</ol>';

            document.getElementById('ecw-cancelling-container').innerHTML = cancellingHTML;

           

            // Common Scenarios

            const commonScenarios = ecwData.CommonScenarios;

            let commonScenariosHTML = '';

           

            for (const [scenario, steps] of Object.entries(commonScenarios)) {

                commonScenariosHTML += `<h4>${scenario}</h4><ol>`;

                steps.forEach(step => {

                    commonScenariosHTML += `<li>${step}</li>`;

                });

                commonScenariosHTML += '</ol>';

            }

           

            document.getElementById('ecw-common-scenarios-container').innerHTML = commonScenariosHTML;

        }

       

        // Function to populate Hospital Documents section

        function populateHospitalDocuments() {

            const hospitalDocsData = jsonData.HospitalDocuments;

           

            // Intro

            let introHTML = '';

            hospitalDocsData.Intro.forEach(item => {

                introHTML += `<p>${item}</p>`;

            });

            document.getElementById('hospital-docs-intro-container').innerHTML = introHTML;

           

            // Document Types

            let docTypesHTML = '<h3>Document Types</h3>';

            hospitalDocsData.DocumentTypes.forEach(docType => {

                docTypesHTML += `

                    <div class="step">

                        <h4>${docType.name}</h4>

                        <p><strong>What it is:</strong> ${docType.what_it_is}</p>

                        <p><strong>Types included:</strong></p>

                        <ul>

                            ${docType.types_included.map(type => `<li>${type}</li>`).join('')}

                        </ul>

                        <p><strong>Why hospitals ask:</strong></p>

                        <ul>

                            ${docType.why_hospitals_ask.map(reason => `<li>${reason}</li>`).join('')}

                        </ul>

                    </div>

                `;

            });

            document.getElementById('hospital-docs-types-container').innerHTML = docTypesHTML;

           

            // Why These Requests Matter

            let importanceHTML = '<ul>';

            hospitalDocsData.WhyTheseRequestsMatter.forEach(item => {

                importanceHTML += `<li>${item}</li>`;

            });

            importanceHTML += '</ul>';

            document.getElementById('hospital-docs-importance-container').innerHTML = importanceHTML;

           

            // Agent Tips

            let tipsHTML = '<ul>';

            hospitalDocsData.AgentTips.forEach(tip => {

                tipsHTML += `<li>${tip}</li>`;

            });

            tipsHTML += '</ul>';

            document.getElementById('hospital-docs-tips-container').innerHTML = tipsHTML;

        }

       

        // Function to populate Staff Extensions section

        function populateStaffExtensions() {

            const staffData = jsonData.StaffExtensions;

            let tableBodyHTML = '';

           

            staffData.forEach(staff => {

                tableBodyHTML += `

                    <tr>

                        <td>${staff.Staff}</td>

                        <td>${staff.Ext}</td>

                        <td>${staff.Department || staff.Responsibilities || ''}</td>

                    </tr>

                `;

            });

           

            document.getElementById('staff-extensions-body').innerHTML = tableBodyHTML;

        }

       

        // Function to populate Key Notes section

        function populateKeyNotes() {

            const keyNotesData = jsonData.KeyNotes;

            let keyNotesHTML = '';

           

            for (const [key, value] of Object.entries(keyNotesData)) {

                if (typeof value === 'object') {

                    keyNotesHTML += `<h3>${key}</h3>`;

                    for (const [subKey, subValue] of Object.entries(value)) {

                        keyNotesHTML += `<p><strong>${subKey}:</strong> ${subValue}</p>`;

                    }

                } else {

                    keyNotesHTML += `<p><strong>${key}:</strong> ${value}</p>`;

                }

            }

           

            document.getElementById('key-notes-container').innerHTML = keyNotesHTML;

        }

       

        // Function to populate Insurance Portals section

        function populateInsurancePortals() {

            const insuranceData = jsonData.InsurancePortals;

           

            // Accepted Insurances

            let acceptedHTML = '';

            insuranceData.accepted_insurances.forEach(insurance => {

                acceptedHTML += `

                    <tr>

                        <td>${insurance.insurance_name}</td>

                        <td>${insurance.portal_name}</td>

                        <td><a href="${insurance.website}" target="_blank">${insurance.website}</a></td>

                        <td>${insurance.pcp_change_required ? 'Yes' : 'No'}</td>

                        <td>${insurance.notes || ''}</td>

                    </tr>

                `;

            });

            document.getElementById('accepted-insurances-body').innerHTML = acceptedHTML;

           

            // Pending Verification

            let pendingHTML = '';

            insuranceData.pending_verification.forEach(insurance => {

                pendingHTML += `

                    <tr>

                        <td>${insurance.insurance_name}</td>

                        <td>${insurance.portal_name}</td>

                        <td>${insurance.website}</td>

                        <td>${insurance.status}</td>

                    </tr>

                `;

            });

            document.getElementById('pending-verification-body').innerHTML = pendingHTML;

           

            // Not Accepted

            let notAcceptedHTML = '';

            insuranceData.not_accepted.forEach(insurance => {

                notAcceptedHTML += `

                    <tr>

                        <td>${insurance.insurance_name}</td>

                        <td>${insurance.reason}</td>

                    </tr>

                `;

            });

            document.getElementById('not-accepted-body').innerHTML = notAcceptedHTML;

           

            // Special Notes

            let specialNotesHTML = '';

            for (const [key, value] of Object.entries(insuranceData.special_notes)) {

                specialNotesHTML += `<p><strong>${key}:</strong> ${value}</p>`;

            }

            document.getElementById('special-notes-container').innerHTML = specialNotesHTML;

        }

       

        // Function to populate Appointment Guide section

        function populateAppointmentGuide() {

            const apptGuideData = jsonData.AppointmentGuide;

           

            // Visit Types

            let visitTypesHTML = '';

            apptGuideData.visit_types.forEach(visit => {

                visitTypesHTML += `

                    <tr>

                        <td>${visit.visit_type}</td>

                        <td>${visit.description}</td>

                        <td>${visit.duration}</td>

                        <td>${visit.extra_info || ''}</td>

                        <td>${visit.rules || ''}</td>

                    </tr>

                `;

            });

            document.getElementById('visit-types-body').innerHTML = visitTypesHTML;

           

            // Sonograms

            let sonogramsHTML = '';

            apptGuideData.sonograms.forEach(sono => {

                sonogramsHTML += `

                    <tr>

                        <td>${sono.type}</td>

                        <td>${sono.description}</td>

                        <td>${sono.duration}</td>

                        <td>${sono.preparation || ''}</td>

                        <td>${sono.notes || ''}</td>

                    </tr>

                `;

            });

            document.getElementById('sonograms-body').innerHTML = sonogramsHTML;

           

            // Visit Statuses

            let visitStatusesHTML = '';

            apptGuideData.visit_statuses.forEach(status => {

                visitStatusesHTML += `

                    <tr>

                        <td>${status.status}</td>

                        <td>${status.description}</td>

                        <td>${status.notes || ''}</td>

                        <td>${status.form || ''}</td>

                    </tr>

                `;

            });

            document.getElementById('visit-statuses-body').innerHTML = visitStatusesHTML;

        }

       

        // Function to populate Complaints section

        function populateComplaints() {

            const complaintsData = jsonData.Complaints;

            let complaintsHTML = '<ol>';

           

            complaintsData.HowToSubmit.forEach(step => {

                complaintsHTML += `<li>${step}</li>`;

            });

            complaintsHTML += '</ol>';

           

            document.getElementById('complaints-container').innerHTML = complaintsHTML;

        }

       

        // Function to populate HIPAA section

        function populateHIPAA() {

            const hipaaData = jsonData.HIPAA;

           

            // Intro

            let introHTML = '';

            hipaaData.Intro.forEach(item => {

                introHTML += `<p>${item}</p>`;

            });

            document.getElementById('hipaa-intro-container').innerHTML = introHTML;

           

            // What is PHI

            let phiHTML = '<ul>';

            hipaaData.WhatIsPHI.forEach(item => {

                phiHTML += `<li>${item}</li>`;

            });

            phiHTML += '</ul>';

            document.getElementById('hipaa-phi-container').innerHTML = phiHTML;

           

            // Responsibilities

            let responsibilitiesHTML = '<ul>';

            hipaaData.Responsibilities.forEach(item => {

                responsibilitiesHTML += `<li>${item}</li>`;

            });

            responsibilitiesHTML += '</ul>';

            document.getElementById('hipaa-responsibilities-container').innerHTML = responsibilitiesHTML;

           

            // What to Do If Breach

            let breachHTML = '<ul>';

            hipaaData.WhatToDoIfBreach.forEach(item => {

                breachHTML += `<li>${item}</li>`;

            });

            breachHTML += '</ul>';

            document.getElementById('hipaa-breach-container').innerHTML = breachHTML;

           

            // Empathy and HIPAA

            let empathyHTML = '<ul>';

            hipaaData.EmpathyAndHIPAA.forEach(item => {

                empathyHTML += `<li>${item}</li>`;

            });

            empathyHTML += '</ul>';

            document.getElementById('hipaa-empathy-container').innerHTML = empathyHTML;

           

            // Checklist

            let checklistHTML = '<ul class="hipaa-checklist">';

            hipaaData.Checklist.forEach(item => {

                checklistHTML += `<li>${item.replace('✅', '').trim()}</li>`;

            });

            checklistHTML += '</ul>';

            document.getElementById('hipaa-checklist-container').innerHTML = checklistHTML;

           

            // Resources

            let resourcesHTML = '<ul>';

            hipaaData.Resources.forEach(item => {

                resourcesHTML += `<li>${item}</li>`;

            });

            resourcesHTML += '</ul>';

            document.getElementById('hipaa-resources-container').innerHTML = resourcesHTML;

        }

       

        // Function to populate Weekly Updates section

        function populateWeeklyUpdates() {

            const updatesData = jsonData.WeeklyUpdates;

            let updatesHTML = '';

           

            for (const [date, items] of Object.entries(updatesData)) {

                updatesHTML += `

                    <div class="update-item">

                        <div class="update-date">${date}</div>

                        <div class="update-content">

                            <ul>

                                ${items.map(item => `<li>${item}</li>`).join('')}

                            </ul>

                        </div>

                    </div>

                `;

            }

           

            document.getElementById('weekly-updates-container').innerHTML = updatesHTML;

        }

       

        // Function to handle tab switching

        function setupTabs() {

            const tabs = document.querySelectorAll('.tab');

           

            tabs.forEach(tab => {

                tab.addEventListener('click', () => {

                    // Remove active class from all tabs and tab contents

                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));

                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

                   

                    // Add active class to clicked tab and corresponding content

                    tab.classList.add('active');

                    const tabId = tab.getAttribute('data-tab');

                    document.getElementById(tabId).classList.add('active');

                });

            });

        }

       

        // Function to handle sidebar menu toggles

        function setupSidebarMenu() {

            const menuToggles = document.querySelectorAll('.menu-toggle');

           

            menuToggles.forEach(toggle => {

                toggle.addEventListener('click', () => {

                    const submenu = toggle.nextElementSibling;

                    toggle.classList.toggle('active');

                    submenu.classList.toggle('show');

                });

            });

        }

       

        // Function to handle search functionality

        function setupSearch() {

            const searchBox = document.getElementById('search-box');

           

            searchBox.addEventListener('input', () => {

                const searchTerm = searchBox.value.toLowerCase();

               

                if (searchTerm.length > 2) {

                    // Search logic would go here in a real implementation

                    console.log(`Searching for: ${searchTerm}`);

                }

            });

        }

       

        // Function to initialize smooth scrolling for anchor links

        function setupSmoothScrolling() {

            document.querySelectorAll('a[href^="#"]').forEach(anchor => {

                anchor.addEventListener('click', function(e) {

                    e.preventDefault();

                   

                    const targetId = this.getAttribute('href');

                    const targetElement = document.querySelector(targetId);

                   

                    if (targetElement) {

                        targetElement.scrollIntoView({

                            behavior: 'smooth'

                        });

                    }

                });

            });

        }

       

        // Initialize all functions when the DOM is loaded

        document.addEventListener('DOMContentLoaded', () => {

            populateWelcomeSection();

            populateCallFlowSections();

            populateECWGuide();

            populateHospitalDocuments();

            populateStaffExtensions();

            populateKeyNotes();

            populateInsurancePortals();

            populateAppointmentGuide();

            populateComplaints();

            populateHIPAA();

            populateWeeklyUpdates();

           

            setupTabs();

            setupSidebarMenu();

            setupSearch();

            setupSmoothScrolling();

        });

    </script>

</body>

<script>
  // Path to your JSON file
  const jsonPath = 'suffolk_kb_json.json';

  fetch(jsonPath)
    .then(response => response.json())
    .then(data => {
      // Example: Populate Welcome Section
      if (data.WhoIsSuffolkPrimaryHealth) {
        const welcome = data.WhoIsSuffolkPrimaryHealth;
        document.getElementById('welcome-container').innerHTML = `<h2>${welcome.WelcomeMessage || ''}</h2>`;
        document.getElementById('intro-container').innerHTML = (welcome.Intro || []).map(p => `<p>${p}</p>`).join('');
        document.getElementById('core-values-container').innerHTML = (welcome.CoreValues || []).map(cv => {
          const key = Object.keys(cv)[0];
          return `<div class="core-value-card"><div class="core-value-title">${key.replace(/([A-Z])/g, ' $1').trim()}</div><div>${cv[key]}</div></div>`;
        }).join('');
        document.getElementById('why-you-matter-container').innerHTML = (welcome.WhyYouMatter || []).map(p => `<p>${p}</p>`).join('');
        document.getElementById('closing-container').innerHTML = (welcome.Closing || []).map(p => `<p>${p}</p>`).join('');
      }
      // Repeat similar logic for other sections, e.g.:
      // data.CallFlow, data.ECWGuide, etc.
    })
    .catch(err => {
      document.getElementById('welcome-container').innerHTML = '<p style="color:red;">Could not load knowledge base data.</p>';
    });
</script>

</html>